unique(dataIn$scenario[dataIn$year == 2020])
unique(dataIn$scenario[dataIn$year == 2020,])
unique(dataIn$scenario[dataIn$year = 2020])
unique(dataIn$scenario[dataIn$year == 2018])
unique(dataIn$scenario[dataIn$year == 2019])
unique(dataIn$year[(dataIn$long == -110.0472 && dataIn$lat == 37.60413])
unique(dataIn$year[(dataIn$long == -110.0472 && dataIn$lat == 37.60413)])
unique(dataIn$veg[(dataIn$long == -110.0472 && dataIn$lat == 37.60413)])
dataIn$veg[(dataIn$long == -110.0472 && dataIn$lat == 37.60413)]
dataIn$veg[(dataIn$long == -110.0472 & dataIn$lat == 37.60413)]
unique(dataIn$veg[(dataIn$long == -110.0472 & dataIn$lat == 37.60413)])
unique(dataIn$veg[(dataIn$long == -110.0472 & dataIn$lat == 37.60413)])
paste(head(dataIn$long), head(dataIn$lat))
uqID <- paste(head(dataIn$long), head(dataIn$lat), head(year), head(scenario) )
uqID <- paste(head(dataIn$long), head(dataIn$lat), head(dataIn$year), head(dataIn$scenario) )
uqID <- paste(dataIn$long, dataIn$lat, dataIn$year, dataIn$scenario)
unique(uqID)
dataIn$uqID <- uqID
cleanData <- dataIn[1,]
View(cleanData)
cleanData[2,] <- dataIn[1,]
is.na(c(na,na))
is.na(c(NA,NA))
is.na(c(NA,1))
sum(is.na(c(NA,NA)))
# create new copy of dataframe that we will combine rows into
cleanData <- dataIn[1,]
#nrow(uqID)
for(i in 1:200) {
if(i %% 10000 == 0){
print(i)
}
iter_id = uqID[i]
iter_data = dataIn %>% filter(uqID == iter_id)
for(j in ncol(iter_data)) {
iter_col = iter_data[,j]
# if all entries, NA, record NA
if(sum(is.na(iter_col)) == length(iter_col)) {
cleanData[i,j] = NA
# if only one non-NA entry, record that
} else if(sum(!is.na(iter_col)) == 1){
cleanData[i,j] = iter_col[!is.na(iter_col)]
# if entries all the same, record that
} else if(length(unique(iter_col)) == 1) {
cleanData[i,j] = iter_col[1]
# if entries conflict, print error
} else if(length(unique(iter_col)) > 1 ) {
print(paste("error, i: ", str(i), " j: ", str(j)))
cleanData[i,J] = NA
}
}
}
View(cleanData)
# create new copy of dataframe that we will combine rows into
cleanData <- dataIn[1,]
#nrow(uqID)
for(i in 1:10) {
if(i %% 10000 == 0){
print(i)
}
iter_id = uqID[i]
iter_data = dataIn %>% filter(uqID == iter_id)
print(iter_data)
for(j in ncol(iter_data)) {
iter_col = iter_data[,j]
# if all entries, NA, record NA
if(sum(is.na(iter_col)) == length(iter_col)) {
cleanData[i,j] = NA
# if only one non-NA entry, record that
} else if(sum(!is.na(iter_col)) == 1){
cleanData[i,j] = iter_col[!is.na(iter_col)]
# if entries all the same, record that
} else if(length(unique(iter_col)) == 1) {
cleanData[i,j] = iter_col[1]
# if entries conflict, print error
} else if(length(unique(iter_col)) > 1 ) {
print(paste("error, i: ", str(i), " j: ", str(j)))
cleanData[i,J] = NA
}
}
}
# create new copy of dataframe that we will combine rows into
cleanData <- dataIn[1,]
#nrow(uqID)
for(i in 1:10) {
if(i %% 10000 == 0){
print(i)
}
iter_id = uqID[i]
iter_data = dataIn %>% filter(uqID == iter_id)
print(iter_data)
for(j in 1:ncol(iter_data)) {
iter_col = iter_data[,j]
# if all entries, NA, record NA
if(sum(is.na(iter_col)) == length(iter_col)) {
cleanData[i,j] = NA
# if only one non-NA entry, record that
} else if(sum(!is.na(iter_col)) == 1){
cleanData[i,j] = iter_col[!is.na(iter_col)]
# if entries all the same, record that
} else if(length(unique(iter_col)) == 1) {
cleanData[i,j] = iter_col[1]
# if entries conflict, print error
} else if(length(unique(iter_col)) > 1 ) {
print(paste("error, i: ", str(i), " j: ", str(j)))
cleanData[i,J] = NA
}
}
}
# create new copy of dataframe that we will combine rows into
cleanData <- dataIn[1,]
#nrow(uqID)
for(i in 1:10) {
if(i %% 10000 == 0){
print(i)
}
iter_id = uqID[i]
iter_data = dataIn %>% filter(uqID == iter_id)
print(iter_data)
for(j in 1:ncol(iter_data)) {
iter_col = iter_data[,j]
# if all entries, NA, record NA
if(sum(is.na(iter_col)) == length(iter_col)) {
cleanData[i,j] = NA
# if only one non-NA entry, record that
} else if(sum(!is.na(iter_col)) == 1){
cleanData[i,j] = iter_col[!is.na(iter_col)]
# if entries all the same, record that
} else if(length(unique(iter_col)) == 1) {
cleanData[i,j] = iter_col[1]
# if entries conflict, print error
} else if(length(unique(iter_col)) > 1 ) {
print(paste("error, i: ", str(i), " j: ", str(j)))
cleanData[i,j] = NA
}
}
}
# create new copy of dataframe that we will combine rows into
cleanData <- dataIn[1,]
#nrow(uqID)
for(i in 1:10) {
if(i %% 10000 == 0){
print(i)
}
iter_id <- uqID[i]
iter_data <- dataIn %>% filter(uqID == iter_id)
print(iter_data)
for(j in 1:ncol(iter_data)) {
iter_col = iter_data[,j]
# if all entries, NA, record NA
if(sum(is.na(iter_col)) == length(iter_col)) {
cleanData[i,j] = NA
# if only one non-NA entry, record that
} else if(sum(!is.na(iter_col)) == 1){
cleanData[i,j] = iter_col[!is.na(iter_col)]
# if entries all the same, record that
} else if(length(unique(iter_col)) == 1) {
cleanData[i,j] = iter_col[1]
# if entries conflict, print error
} else if(length(unique(iter_col)) > 1 ) {
print(paste("error, i: ", str(i), " j: ", str(j)))
cleanData[i,j] = NA
}
}
}
View(cleanData)
uqIDs <- unique(uqID)
uqIDs <- unique(uqID)
# create new copy of dataframe that we will combine rows into
cleanData <- dataIn[1,]
#nrow(uqID)
for(i in 1:10) {
if(i %% 10000 == 0){
print(i)
}
iter_id <- uqIDs[i]
iter_data <- dataIn %>% filter(uqID == iter_id)
print(iter_data)
for(j in 1:ncol(iter_data)) {
iter_col = iter_data[,j]
# if all entries, NA, record NA
if(sum(is.na(iter_col)) == length(iter_col)) {
cleanData[i,j] = NA
# if only one non-NA entry, record that
} else if(sum(!is.na(iter_col)) == 1){
cleanData[i,j] = iter_col[!is.na(iter_col)]
# if entries all the same, record that
} else if(length(unique(iter_col)) == 1) {
cleanData[i,j] = iter_col[1]
# if entries conflict, print error
} else if(length(unique(iter_col)) > 1 ) {
print(paste("error, i: ", str(i), " j: ", str(j)))
cleanData[i,j] = NA
}
}
}
View(cleanData)
uqIDs <- unique(uqID)
# create new copy of dataframe that we will combine rows into
cleanData <- dataIn[1,]
#nrow(uqID)
for(i in 1:10) {
if(i %% 10000 == 0){
print(i)
}
iter_id <- uqIDs[i]
iter_data <- dataIn %>% filter(uqID == iter_id)
for(j in 1:ncol(iter_data)) {
iter_col = iter_data[,j]
# if all entries, NA, record NA
if(sum(is.na(iter_col)) == length(iter_col)) {
cleanData[i,j] = NA
# if only one non-NA entry, record that
} else if(sum(!is.na(iter_col)) == 1){
cleanData[i,j] = iter_col[!is.na(iter_col)]
# if entries all the same, record that
} else if(length(unique(iter_col)) == 1) {
cleanData[i,j] = iter_col[1]
# if entries conflict, print error
} else if(length(unique(iter_col)) > 1 ) {
print(paste("error, i: ", str(i), " j: ", str(j)))
print(unique(iter_col))
cleanData[i,j] = NA
}
}
}
# round one column that is not matching
dataIn$RL <- round(dataIn$RL, digits = 5)
uqIDs <- unique(uqID)
# create new copy of dataframe that we will combine rows into
cleanData <- dataIn[1,]
#nrow(uqID)
for(i in 1:10) {
if(i %% 10000 == 0){
print(i)
}
iter_id <- uqIDs[i]
iter_data <- dataIn %>% filter(uqID == iter_id)
for(j in 1:ncol(iter_data)) {
iter_col = iter_data[,j]
# if all entries, NA, record NA
if(sum(is.na(iter_col)) == length(iter_col)) {
cleanData[i,j] = NA
# if only one non-NA entry, record that
} else if(sum(!is.na(iter_col)) == 1){
cleanData[i,j] = iter_col[!is.na(iter_col)]
# if entries all the same, record that
} else if(length(unique(iter_col)) == 1) {
cleanData[i,j] = iter_col[1]
# if entries conflict, print error
} else if(length(unique(iter_col)) > 1 ) {
print(paste("error, i: ", str(i), " j: ", str(j)))
print(unique(iter_col))
cleanData[i,j] = NA
}
}
}
uqIDs <- unique(uqID)
# create new copy of dataframe that we will combine rows into
cleanData <- dataIn[1,]
#nrow(uqID)
for(i in 1:nrow(uqID)) {
if(i %% 10000 == 0){
print(i)
}
iter_id <- uqIDs[i]
iter_data <- dataIn %>% filter(uqID == iter_id)
for(j in 1:ncol(iter_data)) {
iter_col = iter_data[,j]
# if all entries, NA, record NA
if(sum(is.na(iter_col)) == length(iter_col)) {
cleanData[i,j] = NA
# if only one non-NA entry, record that
} else if(sum(!is.na(iter_col)) == 1){
cleanData[i,j] = iter_col[!is.na(iter_col)]
# if entries all the same, record that
} else if(length(unique(iter_col)) == 1) {
cleanData[i,j] = iter_col[1]
# if entries conflict, print error
} else if(length(unique(iter_col)) > 1 ) {
print(paste("error, i: ", str(i), " j: ", str(j)))
print(unique(iter_col))
cleanData[i,j] = NA
}
}
}
uqIDs <- unique(uqID)
# create new copy of dataframe that we will combine rows into
cleanData <- dataIn[1,]
#nrow(uqID)
for(i in 1:length(uqID)) {
if(i %% 10000 == 0){
print(i)
}
iter_id <- uqIDs[i]
iter_data <- dataIn %>% filter(uqID == iter_id)
for(j in 1:ncol(iter_data)) {
iter_col = iter_data[,j]
# if all entries, NA, record NA
if(sum(is.na(iter_col)) == length(iter_col)) {
cleanData[i,j] = NA
# if only one non-NA entry, record that
} else if(sum(!is.na(iter_col)) == 1){
cleanData[i,j] = iter_col[!is.na(iter_col)]
# if entries all the same, record that
} else if(length(unique(iter_col)) == 1) {
cleanData[i,j] = iter_col[1]
# if entries conflict, print error
} else if(length(unique(iter_col)) > 1 ) {
print(paste("error, i: ", str(i), " j: ", str(j)))
print(unique(iter_col))
cleanData[i,j] = NA
}
}
}
# load data in
setwd("~/dsan/spring2024/arches_climate")
dataIn <- read.csv("data/NABR_historic.csv")
dataIn <- dataIn[rowSums(is.na(dataIn)) != ncol(dataIn), ]
dataIn <- dataIn[!duplicated(dataIn),]
uqID <- paste(dataIn$long, dataIn$lat, dataIn$year, dataIn$scenario)
dataIn$uqID <- uqID
uqIDs <- unique(uqID)
# create new copy of dataframe that we will combine rows into
cleanData <- dataIn[1,]
#nrow(uqID)
for(i in 1:10) {
if(i %% 1000 == 0){
print(i)
}
iter_id <- uqIDs[i]
iter_data <- dataIn %>% filter(uqID == iter_id)
for(j in 1:ncol(iter_data)) {
iter_col = iter_data[,j]
# if all entries, NA, record NA
if(sum(is.na(iter_col)) == length(iter_col)) {
cleanData[i,j] = NA
# if only one non-NA entry, record that
} else if(sum(!is.na(iter_col)) == 1){
cleanData[i,j] = iter_col[!is.na(iter_col)]
# if entries all the same, record that
} else if(length(unique(iter_col)) == 1) {
cleanData[i,j] = iter_col[1]
# if entries conflict, print error
} else if(length(unique(iter_col)) > 1 ) {
print(paste("error, i: ", str(i), " j: ", str(j)))
print(unique(iter_col))
cleanData[i,j] = NA
}
}
}
View(dataIn)
annuals <- c("T_Annual", "PPT_Annual")
dataIn <- select(dataIn, -c("T_Annual", "PPT_Annual")
annuals <- c("T_Annual", "PPT_Annual")
dataIn <- select(dataIn, -c("T_Annual", "PPT_Annual"))
uqID <- paste(dataIn$long, dataIn$lat, dataIn$year, dataIn$scenario)
dataIn$uqID <- uqID
uqIDs <- unique(uqID)
# create new copy of dataframe that we will combine rows into
cleanData <- dataIn[1,]
#nrow(uqID)
for(i in 1:10) {
if(i %% 1000 == 0){
print(i)
}
iter_id <- uqIDs[i]
iter_data <- dataIn %>% filter(uqID == iter_id)
for(j in 1:ncol(iter_data)) {
iter_col = iter_data[,j]
# if all entries, NA, record NA
if(sum(is.na(iter_col)) == length(iter_col)) {
cleanData[i,j] = NA
# if only one non-NA entry, record that
} else if(sum(!is.na(iter_col)) == 1){
cleanData[i,j] = iter_col[!is.na(iter_col)]
# if entries all the same, record that
} else if(length(unique(iter_col)) == 1) {
cleanData[i,j] = iter_col[1]
# if entries conflict, print error
} else if(length(unique(iter_col)) > 1 ) {
print(paste("error, i: ", str(i), " j: ", str(j)))
print(unique(iter_col))
cleanData[i,j] = NA
}
}
}
uqIDs <- unique(uqID)
# create new copy of dataframe that we will combine rows into
cleanData <- dataIn[1,]
#nrow(uqID)
for(i in 1:10) {
if(i %% 1000 == 0){
print(i)
}
iter_id <- uqIDs[i]
iter_data <- dataIn %>% filter(uqID == iter_id)
for(j in 1:ncol(iter_data)) {
iter_col = iter_data[,j]
# if all entries, NA, record NA
if(sum(is.na(iter_col)) == length(iter_col)) {
cleanData[i,j] = NA
# if only one non-NA entry, record that
} else if(sum(!is.na(iter_col)) == 1){
cleanData[i,j] = iter_col[!is.na(iter_col)]
# if entries all the same, record that
} else if(length(unique(iter_col)) == 1) {
cleanData[i,j] = iter_col[1]
# if entries conflict, print error
} else if(length(unique(iter_col)) > 1 ) {
print(paste("error, i: ", str(i), " j: ", str(j)))
print(unique(iter_col))
print(is.na(iter_col))
cleanData[i,j] = NA
}
}
}
uqIDs <- unique(uqID)
# create new copy of dataframe that we will combine rows into
cleanData <- dataIn[1,]
#nrow(uqID)
for(i in 1:10) {
if(i %% 1000 == 0){
print(i)
}
iter_id <- uqIDs[i]
iter_data <- dataIn %>% filter(uqID == iter_id)
for(j in 1:ncol(iter_data)) {
iter_col = unique(iter_data[,j])
# if all entries, NA, record NA
if(sum(is.na(iter_col)) == length(iter_col)) {
cleanData[i,j] = NA
# if only one non-NA entry, record that
} else if(sum(!is.na(iter_col)) == 1){
cleanData[i,j] = iter_col[!is.na(iter_col)]
# if entries all the same, record that
} else if(length(unique(iter_col)) == 1) {
cleanData[i,j] = iter_col[1]
# if entries conflict, print error
} else if(length(unique(iter_col)) > 1 ) {
print(paste("error, i: ", str(i), " j: ", str(j)))
print(unique(iter_col))
print(is.na(iter_col))
cleanData[i,j] = NA
}
}
}
View(cleanData)
View(dataIn)
uqIDs <- unique(uqID)
# create new copy of dataframe that we will combine rows into
cleanData <- dataIn[1,]
#nrow(uqID)
for(i in 1:length(uqIDs)) {
if(i %% 1000 == 0){
print(i)
}
iter_id <- uqIDs[i]
iter_data <- dataIn %>% filter(uqID == iter_id)
for(j in 1:ncol(iter_data)) {
iter_col = unique(iter_data[,j])
# if all entries, NA, record NA
if(sum(is.na(iter_col)) == length(iter_col)) {
cleanData[i,j] = NA
# if only one non-NA entry, record that
} else if(sum(!is.na(iter_col)) == 1){
cleanData[i,j] = iter_col[!is.na(iter_col)]
# if entries all the same, record that
} else if(length(unique(iter_col)) == 1) {
cleanData[i,j] = iter_col[1]
# if entries conflict, print error
} else if(length(unique(iter_col)) > 1 ) {
print(paste("error, i: ", str(i), " j: ", str(j)))
print(unique(iter_col))
print(is.na(iter_col))
cleanData[i,j] = NA
}
}
}
View(cleanData)
ggplot(cleanData, aes(x = long, y = lat)) + geom_point()
ggplot(cleanData, aes(x = lat, y = long)) + geom_point()
ggplot(cleanData, aes(x = long, y = lat)) + geom_point()
ggplot(cleanData, aes(x = long, y = lat)) + geom_point()
ggplot(cleanData, aes(x = lat, y = long)) + geom_point()
ggplot(cleanData, aes(x = -lat, y = -long)) + geom_point()
ggplot(cleanData, aes(x = -long, y = -lat)) + geom_point()
ggplot(cleanData, aes(x = -long, y = lat)) + geom_point()
library(sf)
library(sf)
my_sf <- st_as_sf(dataIn, coords = c('long', 'lat'))
my_sf <- st_set_crs(my_sf, crs = 4326)
my_sf <- st_as_sf(dataIn, coords = c('long', 'lat'))
my_sf <- st_set_crs(my_sf)
library(sf)
library(mapview)
install.packages("mapview")
write.csv(dataIn, "hist_data.csv")
base_world + geom_point(dataIn, aes(x = lon, y = lat))
ggplot(dataIn, aes(x = lon, y = lat)) + geom_point() + coord_map('mercator')
ggplot(dataIn, aes(x = long, y = lat)) + geom_point() + coord_map('mercator')
ggplot(dataIn, aes(x = long, y = lat)) + geom_point() + coord_map('mercator')
ggplot(dataIn, aes(x = long, y = lat)) + geom_blank() + coord_map('mercator')
library(sf)
#library(mapview)
#mapview(dataIn, xcol = "long", ycol = "lat", crs = 4269, grid = FALSE)
xmin = -120
xmax = -90
ymin = 30
ymax = 40
ggplot(dataIn, aes(x = long, y = lat)) + geom_blank() + coord_map('mercator') + annotation_raster(ggmap, xmin, xmax, ymin, ymax)
install.packages("ggmap")
